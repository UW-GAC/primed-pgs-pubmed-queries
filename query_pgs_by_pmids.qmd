---
title: "PRIMED Publications in PGS catalog"
author: "PRIMED CC"
date: "`r lubridate::today()`"
format:
  html:
    toc: true
execute:
  echo: false
params:
    score_records_file: NA
    metrics_records_file: NA
    publication_records_file: NA
---

```{r library, include=FALSE}
library(tidyverse)
library(knitr)
library(jsonlite)
library(kableExtra)

options(knitr.kable.NA = '--')
knitr::opts_chunk$set(echo=FALSE)
```

```{r}
scores = tibble(record=read_json(file.path(params$score_records_file)))
metrics = tibble(record=read_json(file.path(params$metrics_records_file)))
pubs = tibble(record=read_json(file.path(params$publication_records_file)))

#mapping_results = read_tsv(params$mapping_results_file, show_col_types=FALSE)
```



# Summary

This table shows the number of unique publications, the number of PRS developed in PRIMED publication, and the number of unique PRS evaluated by PRIMED publications. A single publication can include both development and evaluation of a PRS.

```{r}
s = scores %>% hoist(record,
    pgs_id="id",
  )
p = pubs %>%
  hoist(record,
    pgp_id="id",
    "pmid",
    "associated_pgs_ids"
  ) %>%
  unnest_wider(associated_pgs_ids) %>%
  pivot_longer(c(development, evaluation), names_to="type", values_to="pgs_id") %>%
  unnest_longer(pgs_id)

p %>%
  summarise(
    `Publications`=length(unique(pgp_id)),
    `PRS developed`=length(unique(pgs_id[type=="development"])),
    `PRS evaluated`=length(unique(pgs_id[type=="evaluation"])),
  ) %>%
  pivot_longer(everything(), names_to="Summary", values_to="N") %>%
  kable()
```

# Counts by trait

This table shows the number of unique publications, the number of unique PRS developed, the number of and the number of unique PRS evaluated for each trait. The numbers count results from PRIMED publications only.

The columns in this table represent the following numbers:

- Publications: The number of PRIMED publications that developed or evaluated PRS for the listed trait
- PRS developed: The number of unique PRS developed in PRIMED publications for this trait.
- PRS evaluated: The number of unique PRS evaluated in PRIMED publications for this trait.
- Sample sets: The number of unique sample sets used for evaluation of PRS for this trait by PRIMED publications.
- Evaluations: The total number of evaluations for this trait in PRIMED publications. Note that this count can include multiple evaluations of the same PRS in the same sample set, for example with different covariates.

```{r}
p = pubs %>%
  hoist(record,
    pgp_id="id",
    "pmid",
    "associated_pgs_ids"
  ) %>%
  unnest_wider(associated_pgs_ids) %>%
  pivot_longer(c(development, evaluation), names_to="type", values_to="pgs_id") %>%
  unnest_longer(pgs_id)

s = scores %>%
  hoist(record,
    pgs_id="id",
    trait="trait_reported"
  )

m = metrics %>%
  hoist(record,
    ppm_id="id",
    pgs_id="associated_pgs_id",
    pgp_id=c("publication", "id"),
    pss_id=c("sampleset", "id")
  ) %>%
  mutate(type="evaluation")

x <- p %>%
  left_join(s, by ="pgs_id") %>%
  left_join(m, by=c("pgp_id", "pgs_id", "type"))


x %>%
  group_by(Trait=trait) %>%
  summarise(
    `Publications`=length(unique(pmid)),
    `PRS developed`=length(unique(pgs_id[type=="development"])),
    `PRS evaluated`=length(unique(pgs_id[type=="evaluation"])),
    `Sample sets`=length(unique(pss_id[type=="evaluation"])),
    `Evaluations`=length(pgs_id[type=="evaluation"]),
  ) %>%
  kable()
```


# Ancestry information

```{r}
# Pulling ancestry info from PGS Catalog source code.

# https://github.com/PGScatalog/PGS_Catalog/blob/af8cc04817c976bbb666bbfd73c3ba127fca1911/pgs_web/constants.py#L84
ANCESTRY_MAPPINGS = c(
  'Aboriginal Australian' = 'OTH',
  'African American or Afro-Caribbean' = 'AFR',
  'African unspecified'  = 'AFR',
  'Asian unspecified' = 'ASN',
  'Central Asian' = 'ASN',
  'East Asian' = 'EAS',
  'European' = 'EUR',
  'Greater Middle Eastern (Middle Eastern, North African or Persian)' = 'GME',
  'Hispanic or Latin American' = 'AMR',
  'Native American' = 'OTH',
  'Not reported' = 'NR',
  'NR' = 'NR', # Not reported
  'Oceanian' = 'OTH',
  'Other' = 'OTH',
  'Other admixed ancestry' = 'OTH',
  'South Asian' = 'SAS',
  'South East Asian' = 'ASN',
  'Sub-Saharan African' = 'AFR',
  'Sub-Saharan African, African American or Afro-Caribbean' = 'AFR'
)

# https://github.com/PGScatalog/PGS_Catalog/blob/af8cc04817c976bbb666bbfd73c3ba127fca1911/pgs_web/constants.py#L106C1-L119C1
ANCESTRY_LABELS = c(
    'MAE' = 'Multi-ancestry (including European)',
    'MAO' = 'Multi-ancestry (excluding European)',
    'AFR' = 'African',
    'EAS' = 'East Asian',
    'SAS' = 'South Asian',
    'ASN' = 'Additional Asian Ancestries',
    'EUR' = 'European',
    'GME' = 'Greater Middle Eastern',
    'AMR' = 'Hispanic or Latin American',
    'OTH' = 'Additional Diverse Ancestries',
    'NR'  = 'Not Reported'
)

# Replicating samples_combined_ancestry_key from PRS Catalog:

# https://github.com/PGScatalog/PGS_Catalog/blob/af8cc04817c976bbb666bbfd73c3ba127fca1911/catalog/models.py#L820
# def get_ancestry_key(self,anc):
    # anc_key = 'OTH'
    # if anc in constants.ANCESTRY_MAPPINGS.keys():
    #     anc_key = constants.ANCESTRY_MAPPINGS[anc]
    # elif ',' in anc:
    #     if 'European' in anc:
    #         anc_key = 'MAE'
    #     else:
    #         anc_key = 'MAO'
    # return anc_key

get_ancestry_key <- function(anc) {
  anc_key = "OTH"
  if (anc %in% names(ANCESTRY_MAPPINGS)) {
    anc_key = ANCESTRY_MAPPINGS[anc]
  } else if ("," %in% anc) {
    if ("European" %in% anc) {
      anc_key = "MAE"
    } else {
      anc_key = "MAO"
    }
  }
  return(unname(anc_key))
}


# https://github.com/PGScatalog/PGS_Catalog/blob/af8cc04817c976bbb666bbfd73c3ba127fca1911/catalog/models.py#L776
# def samples_combined_ancestry_key(self):
#     '''
#     Fetch the ancestry of each sample and group them into multi-ancestry
#     if there are more than one ancestry categories.
#     Returns the corresponding ancestry key (2-3 letters).
#     '''
#     ancestry_list = []
#     main_ancestry_key = ''
#     for sample in self.samples.all():
#         ancestry = sample.ancestry_broad.strip()
#         ancestry_key = self.get_ancestry_key(ancestry)
#         if ancestry_key and ancestry_key not in ancestry_list:
#             ancestry_list.append(ancestry_key)

#     if len(ancestry_list) > 1:
#         has_eur = 0
#         for anc in ancestry_list:
#             if anc == 'EUR':
#                 has_eur = 1
#         if has_eur == 1:
#             main_ancestry_key = 'MAE'
#         else:
#             main_ancestry_key = 'MAO'
#     else:
#         main_ancestry_key = ancestry_list[0]
#     return main_ancestry_key

get_samples_combined_ancestry_key <- function(samples) {
  # Extract the ancestries associated with the sample set.
  ancestry_list = c()
  main_ancestry_key = ""
  for (sample in samples) {
    ancestry_list = c(ancestry_list, get_ancestry_key(sample$ancestry_broad))
  }
  # Map to PGS codes.
  if (length(ancestry_list) > 1) {
    if ("EUR" %in% ancestry_list) {
      main_ancestry_key = "MAE"
    } else {
      main_ancestry_key = "MAO"
    }
  } else {
    main_ancestry_key = ancestry_list
  }
  return(main_ancestry_key)
}
```

## Key

This table shows the ancestry groups as defined by PRS Catalog that will be used later in this document.

```{r}
enframe(ANCESTRY_LABELS, name="Abbreviation", value="Ancestry") %>% kable()
```

## Ancestry groups used to develop PRS in PRIMED publications

```{r}
p = pubs %>%
  hoist(record,
    pgp_id="id",
    "pmid",
    "associated_pgs_ids"
  ) %>%
  unnest_wider(associated_pgs_ids) %>%
  pivot_longer(c(development, evaluation), names_to="type", values_to="pgs_id") %>%
  unnest_longer(pgs_id) %>%
  filter(type == "development") %>%
  select(-type)

s = scores %>% hoist(record,
    pgs_id="id",
    trait="trait_reported",
    gwas=c("ancestry_distribution", "gwas", "dist"),
    dev=c("ancestry_distribution", "dev", "dist")
  ) %>%
  pivot_longer(c(gwas, dev), names_to="stage", values_to="dist") %>%
  unnest_longer("dist") %>%
  pivot_wider(names_from="dist_id", values_from="dist")

x <- p %>% left_join(s, by="pgs_id") %>%
  select(trait, pgs_id, everything(), -pgp_id, -record.x, -record.y, -pmid) %>%
  arrange(trait, pgs_id, desc(stage))

x %>%
  kable() %>%
  kable_styling() %>%
  collapse_rows(columns = 1:2, valign = "top")
```

Please see the [PGS Catalog Ancestry documentation](https://www.pgscatalog.org/docs/ancestry/#anc_dist) for more information.


## Ancestry groups used for evaluation by PRIMED publications


- Best idea so far:
  - group by trait and pgs AND a new gruping variable - number of  unique smaple sets and number of evaluations (metric_ids) reported. Note in text that a a sample set can be evaluated multiple times for a single PRS, for example by changing covariates.
  - as columns: try to see if we can use the same abbreivations as in the development table. Probably need to pull the PSS id. Unfortunately that does not seem to appear

- Pull ancestry_broad from sample sets and try to apply their rules to get to the same categories as the development table?

```{r}
m = metrics %>%
  hoist(record,
    ppm_id="id",
    pgs_id="associated_pgs_id",
    pgp_id=c("publication", "id"),
    pmid=c("publication", "pmid"),
    samples=c("sampleset", "samples"),
  )
# Add ancestry category
m$ancestry_category = sapply(m$samples, get_samples_combined_ancestry_key)

s = scores %>%
  hoist(record,
    pgs_id="id",
    trait="trait_reported"
  )

x <- m %>%
  left_join(s, by = "pgs_id") %>%
  group_by(trait, pgs_id, ancestry_category) %>%
  count() %>%
  mutate(n=as.character(n))

x %>%
  pivot_wider(names_from="ancestry_category", values_from="n", values_fill="--") %>%
  kable() %>%
  kable_styling() %>%
  collapse_rows(columns = 1:2, valign = "top")
```



# Publications

XXX add table of publications.
- author
- title
- pmid
- pgpid
- list of traits(?) only if not unwieldy
- (or) number of prs developed and number of prs evaluated per pub
